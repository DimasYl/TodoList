{"version":3,"sources":["state/tasks-reducer.ts","reportWebVitals.ts","api/todolist-api.ts","app/app-reducer.ts","state/todolists-reducer.ts","api/tasks-api.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","ErrorSnackbar/ErrorSnackbar.tsx","AppWithRedux.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","initialState","status","error","setAppStatusAC","type","setAppErrorAC","v1","taskApi","taskId","model","rootReducers","combineReducers","todolists","state","action","map","tl","filter","entityStatus","id","todolist","todolist1","find","tasks","stateCopy","forEach","t","task","todoListId","newTask","todolistTask","newTaskArray","app","store","createStore","applyMiddleware","thunk","window","AddItemForm","React","memo","props","console","log","useState","setTitle","setError","addTask","trimmedTitle","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","onBlur","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onDoubleClick","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","onChangeTitleHandler","newValue","changeTaskTitle","className","Checkbox","removeTask","Delete","TodoList","dispatch","useDispatch","useEffect","res","data","items","setTasksAC","all","changeFilter","active","completed","changeTodolistTitle","newTitle","taskForTodolist","removeTodolist","disabled","Button","Alert","elevation","ErrorSnackbar","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","resultCode","removeTodolistAC","messages","length","addTodolist","item","addTodolistTC","changeTodolistTitleAC","taskID","todolistID","removeTaskTC","newFilterValue","taskTitle","addTaskAC","changeStatus","getState","updateTask","deadline","description","priority","startDate","changeTaskStatusAC","updateTaskStatusTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","Grid","container","style","padding","spacing","Paper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75ae84f4.chunk.js","sourcesContent":["import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistActionType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {taskApi, UpdateTaskModelType} from \"../api/tasks-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    id: string\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ActionType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n    | AddTodolistActionType | RemoveTodolistActionType\r\n    | SetTodolistActionType | SetTaskActionType\r\n    | SetAppStatusActionType | SetAppErrorActionType\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\": {\r\n            let stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            let stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            let stateCopy = {...state}\r\n            let tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.id)\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            let stateCopy = {...state}\r\n            // let tasks = stateCopy[action.todolistId]\r\n            // let newTask = {id: v1(), title: action.title, status: TaskStatuses.New,\r\n            //         todoListId: action.todolistId, description: '',\r\n            //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low}\r\n            // stateCopy[action.todolistId] = [newTask, ...tasks]\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            const newTask = [action.task, ...tasks]\r\n            stateCopy[action.task.todoListId] = newTask\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTask = state[action.todolistId]\r\n            let newTaskArray = todolistTask.map(t => t.id === action.taskId\r\n                ? {...t, status: action.status}\r\n                : t)\r\n            state[action.todolistId] = newTaskArray\r\n            return {...state}\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTask = state[action.todolistId]\r\n            let newTaskArray = todolistTask.map(t => t.id === action.id\r\n                ? {...t, title: action.title}\r\n                : t)\r\n            state[action.todolistId] = newTaskArray\r\n            return {...state}\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTaskAC = (id: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', id, todolistId}\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", id, title, todolistId}\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport type SetTaskActionType = ReturnType<typeof setTasksAC>\r\n\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskApi.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            // @ts-ignore\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskID: string, todolistID: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskApi.deleteTask(todolistID, taskID)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskID, todolistID))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskApi.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                // @ts-ignore\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n\r\n    const allTasks = state.tasks\r\n    const tasksForCurrentTodo = allTasks[todolistId]\r\n\r\n    let updateTask = tasksForCurrentTodo.find(tl => {\r\n        return tl.id === taskId\r\n    })\r\n\r\n    if (updateTask) {\r\n\r\n        const model: UpdateTaskModelType = {\r\n            title: updateTask.title,\r\n            status: status,\r\n            deadline: updateTask.deadline,\r\n            description: updateTask.description,\r\n            priority: updateTask.priority,\r\n            startDate: updateTask.startDate\r\n        }\r\n\r\n        //есть проще запись рабочая\r\n        // const model = {...updateTask, status}\r\n        dispatch(setAppStatusAC('loading'))\r\n        taskApi.updateTask(todolistId, taskId, model)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const newTask = res.data.data.item\r\n                    dispatch(changeTaskStatusAC(newTask.id, newTask.status, newTask.todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9796e0df-7156-4180-913f-3e6c30a4c76a'\r\n    }\r\n})\r\n\r\nexport type TodoType = {\r\n    id:string\r\n    addedDate: string\r\n    order: number\r\n    title:string\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: []\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\nexport const todolistApi = {\r\n    getTodo() {\r\n       return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoType }>>('/todo-lists',{title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodo(todolistId: string,title: string) {\r\n        return  instance.put<ResponseType>(`/todo-lists/${todolistId}`,{title})\r\n    }\r\n\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\ntype ActionsType = SetAppStatusActionType | SetAppErrorActionType","import {v1} from \"uuid\";\r\nimport {todolistApi, TodoType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../app/app-reducer\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist: TodolistType\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValueType\r\n}\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\nexport let todolistID1 = v1()\r\nexport let todolistID2 = v1()\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\nconst initialState: TodolistDomainType[] = []\r\nexport type TodolistDomainType = TodoType & { filter: FilterValueType, entityStatus: RequestStatusType }\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: ActionType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            let todolist1 = state.find(tl => tl.id === action.id)\r\n            if (todolist1) {\r\n                todolist1.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTodolistAC = (id: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id}\r\n}\r\n\r\nexport const addTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValueType): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id, filter}\r\n}\r\n\r\nexport const setTodolistAC = (todolists: Array<TodoType>) => ({type: \"SET-TODOLISTS\", todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistAC>\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.getTodo()\r\n        .then((res) => {\r\n            dispatch(setTodolistAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.createTodo(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistApi.deleteTodo(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.updateTodo(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9796e0df-7156-4180-913f-3e6c30a4c76a'\r\n    }\r\n})\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype TaskType = {\r\n    addedDate: string\r\n    deadline: number\r\n    description: number\r\n    id: string\r\n    order: number\r\n    priority: number\r\n    startDate: string\r\n    status: number\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TasksType = {\r\n    error: number\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    fieldsErrors: []\r\n    messages: string[]\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\n\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n       return instance.get<TasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string,title: string) {\r\n        return instance.post<ResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks`,{title})\r\n    },\r\n    deleteTask(todolistId: string,taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (taskTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm called')\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError('Titles is required')\r\n        }\r\n        setTitle('')\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !==null){\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') addTask()\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    return <div>\r\n        <TextField variant={\"outlined\"}\r\n                   value={title}\r\n                   onChange={changeTitle}\r\n                   onKeyPress={onKeyPressAddTask}\r\n                   error={!!error}\r\n                   label={'Title'}\r\n                   helperText={error}\r\n                   onBlur={() => {\r\n                       setError(null)\r\n                   }}\r\n        />\r\n        <IconButton color={\"primary\"} onClick={addTask}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ?\r\n        <TextField variant={\"outlined\"} value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./TodoList\";\r\nimport {TaskStatuses} from \"./state/tasks-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todolistID: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log('Task')\r\n\r\n    const removeTask = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Task} from \"./Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC, TaskPriorities, TaskStatuses} from \"./state/tasks-reducer\";\r\nimport {FilterValueType} from \"./AppWithRedux\";\r\nimport {RequestStatusType} from \"./app/app-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    addTask: (taskTitle: string, todolistID: string) => void\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeFilter: (newFilterValue: FilterValueType, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todolistID: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValueType\r\n    removeTodolist: (todolistID: string) => void\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n    console.log('TodoList called')\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(fetchTasksTC(props.id))\r\n    },[])\r\n\r\n    const all = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const active = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const completed = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    function removeTodolist() {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    let taskForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        taskForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        taskForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {taskForTodolist.map(t => <Task key={t.id}\r\n                                                task={t}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                todolistId={props.id}\r\n\r\n                />)}\r\n            </ul>\r\n            <div>\r\n                <Button color={\"default\"} variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                        onClick={all}>All</Button>\r\n                <Button color={\"primary\"} variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                        onClick={active}>Active</Button>\r\n                <Button color={\"secondary\"} variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                        onClick={completed}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n               ERROR!\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    fetchTodolistTC,\r\n    removeTodolistTC, TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskTC, changeTaskTitleAC, removeTaskTC, TaskStatuses, updateTaskStatusTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {RequestStatusType} from \"./app/app-reducer\";\r\nimport {ErrorSnackbar} from \"./ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\n\r\nconst AppWithRedux = React.memo(() => {\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTodolistTC())\r\n    },[])\r\n\r\n    console.log('AppWithRedux called')\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    },[])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    },[])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(updateTodolistTitleTC(id, newTitle))\r\n    },[])\r\n\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n            dispatch(removeTaskTC(taskID, todolistID))\r\n    },[])\r\n\r\n    const changeFilter = useCallback((newFilterValue: FilterValueType, todolistID: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistID, newFilterValue))\r\n    },[])\r\n\r\n    const addTask = useCallback((taskTitle: string, todolistID: string) => {\r\n        dispatch(addTaskTC(todolistID, taskTitle))\r\n    },[])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskStatusTC(taskId, status, todolistId))\r\n\r\n\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todolistID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID, newTitle, todolistID))\r\n    },[])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge='start' color={\"inherit\"} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let taskForTodolist = tasks[tl.id]\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        entityStatus={tl.entityStatus}\r\n                                        title={tl.title}\r\n                                        tasks={taskForTodolist}\r\n                                        addTask={addTask}\r\n                                        removeTask={removeTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport AppWithRedux from './AppWithRedux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppWithRedux/>\n  </Provider>\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}